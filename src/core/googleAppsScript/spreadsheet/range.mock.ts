import { MockBanding } from './banding.mock';
import { MockDeveloperMetadataFinder } from './developerMetadataFinder.mock';
import { MockFilter } from './filter.mock';
import { MockPivotTable } from './pivotTable.mock';
import { MockTextFinder } from './textFinder.mock';

export const MockRange: GoogleAppsScript.Spreadsheet.Range = {
  activate: () => MockRange,
  activateAsCurrentCell: () => MockRange,
  addDeveloperMetadata: (
    _key: string,
    _visabilityOrValue?:
      | GoogleAppsScript.Spreadsheet.DeveloperMetadataVisibility
      | string,
    _visibility?: GoogleAppsScript.Spreadsheet.DeveloperMetadataVisibility,
  ) => MockRange,
  applyColumnBanding: (
    _bandingTheme?: GoogleAppsScript.Spreadsheet.BandingTheme,
    _showHeader?: boolean,
    _showFooter?: boolean,
  ) => MockBanding,
  applyRowBanding: (
    _bandingTheme?: GoogleAppsScript.Spreadsheet.BandingTheme,
    _showHeader?: boolean,
    _showFooter?: boolean,
  ) => MockBanding,
  autoFill: (
    _destination: GoogleAppsScript.Spreadsheet.Range,
    _series: GoogleAppsScript.Spreadsheet.AutoFillSeries,
  ) => {},
  autoFillToNeighbor: (
    _series: GoogleAppsScript.Spreadsheet.AutoFillSeries,
  ) => {},
  breakApart: () => MockRange,
  canEdit: () => false,
  check: () => MockRange,
  clear: () => MockRange,
  clearContent: () => MockRange,
  clearDataValidations: () => MockRange,
  clearFormat: () => MockRange,
  clearNote: () => MockRange,
  collapseGroups: () => MockRange,
  copyFormatToRange: (
    _gridIdOrSheet:
      | GoogleAppsScript.Integer
      | GoogleAppsScript.Spreadsheet.Sheet,
    _column: GoogleAppsScript.Integer,
    _columnEnd: GoogleAppsScript.Integer,
    _row: GoogleAppsScript.Integer,
    _rowEnd: GoogleAppsScript.Integer,
  ) => {},
  copyTo: (
    _destination: GoogleAppsScript.Spreadsheet.Range,
    _copyPasteTypeOrOptions?:
      | GoogleAppsScript.Spreadsheet.CopyPasteType
      | {
          formatOnly?: boolean | undefined;
          contentsOnly?: boolean | undefined;
        },
  ) => {},
  copyValuesToRange: (
    _gridIdOrSheet:
      | GoogleAppsScript.Integer
      | GoogleAppsScript.Spreadsheet.Sheet,
    _column: GoogleAppsScript.Integer,
    _columnEnd: GoogleAppsScript.Integer,
    _row: GoogleAppsScript.Integer,
    _rowEnd: GoogleAppsScript.Integer,
  ) => {},
  createDeveloperMetadataFinder: () => MockDeveloperMetadataFinder,
  createFilter: () => MockFilter,
  createPivotTable: (_sourceData: GoogleAppsScript.Spreadsheet.Range) =>
    MockPivotTable,
  createTextFinder: (_findText: string) => MockTextFinder,
  deleteCells: (_shiftDimension: GoogleAppsScript.Spreadsheet.Dimension) => {},
  expandGroups: () => MockRange,
  getA1Notation: () => '',
  getBackground: () => '',
  // getBackgrounds: () => [],
  // getBandings: () => [],
  // getCell: (row: Integer, column: Integer): MockRange,
  // getColumn: (): Integer,
  // getDataRegion: (): MockRange,
  // getDataRegion: (dimension: Dimension): MockRange,
  // getDataSourceTables: (): DataSourceTable[],
  // getDataSourceUrl: (): string,
  // getDataTable: (): Charts.DataTable,
  // getDataTable: (firstRowIsHeader: boolean): Charts.DataTable,
  // getDataValidation: (): DataValidation | null,
  // getDataValidations: (): (DataValidation | null)[][],
  // getDeveloperMetadata: (): DeveloperMetadata[],
  // getDisplayValue: (): string,
  // getDisplayValues: (): string[][],
  // getFilter: (): Filter | null,
  // getFontColor: (): string,
  // getFontColors: (): string[][],
  // getFontFamilies: (): string[][],
  // getFontFamily: (): string,
  // getFontLine: (): FontLine,
  // getFontLines: (): FontLine[][],
  // getFontSize: (): Integer,
  // getFontSizes: (): Integer[][],
  // getFontStyle: (): FontStyle,
  // getFontStyles: (): FontStyle[][],
  // getFontWeight: (): FontWeight,
  // getFontWeights: (): FontWeight[][],
  // getFormula: (): string,
  // getFormulaR1C1: (): string | null,
  // getFormulas: (): string[][],
  // getFormulasR1C1: (): (string | null)[][],
  // getGridId: (): Integer,
  // getHeight: (): Integer,
  // getHorizontalAlignment: (): string,
  // getHorizontalAlignments: (): string[][],
  // getLastColumn: (): Integer,
  // getLastRow: (): Integer,
  // getMergedRanges: (): MockRange[],
  // getNextDataCell: (direction: Direction): MockRange,
  // getNote: (): string,
  // getNotes: (): string[][],
  // getNumColumns: (): Integer,
  // getNumRows: (): Integer,
  // getNumberFormat: (): string,
  // getNumberFormats: (): string[][],
  // getRichTextValue: (): RichTextValue | null,
  // getRichTextValues: (): (RichTextValue | null)[][],
  // getRow: (): Integer,
  // getRowIndex: (): Integer,
  // getSheet: (): Sheet,
  // getTextDirection: (): TextDirection | null,
  // getTextDirections: (): (TextDirection | null)[][],
  // getTextRotation: (): TextRotation,
  // getTextRotations: (): TextRotation[][],
  // getTextStyle: (): TextStyle,
  // getTextStyles: (): TextStyle[][],
  // getValue: (): any,
  getValues: () => [],
  // getValues: (): any[][],
  // getVerticalAlignment: (): string,
  // getVerticalAlignments: (): string[][],
  // getWidth: (): Integer,
  // getWrap: (): boolean,
  // getWrapStrategies: (): WrapStrategy[][],
  // getWrapStrategy: (): WrapStrategy,
  // getWraps: (): boolean[][],
  // insertCells: (shiftDimension: Dimension): MockRange,
  // insertCheckboxes: (): MockRange,
  // insertCheckboxes: (checkedValue: any): MockRange,
  // insertCheckboxes: (checkedValue: any, uncheckedValue: any): MockRange,
  // isBlank: (): boolean,
  // isChecked: (): boolean | null,
  // isEndColumnBounded: (): boolean,
  // isEndRowBounded: (): boolean,
  // isPartOfMerge: (): boolean,
  // isStartColumnBounded: (): boolean,
  // isStartRowBounded: (): boolean,
  // merge: (): MockRange,
  // mergeAcross: (): MockRange,
  // mergeVertically: (): MockRange,
  // moveTo: (target: Range): void,
  // offset: (rowOffset: Integer, columnOffset: Integer): MockRange,
  // offset: (rowOffset: Integer, columnOffset: Integer, numRows: Integer): MockRange,
  // offset: (rowOffset: Integer, columnOffset: Integer, numRows: Integer, numColumns: Integer): MockRange,
  // protect: (): Protection,
  // randomize: (): MockRange,
  // removeCheckboxes: (): MockRange,
  // removeDuplicates: (): MockRange,
  // removeDuplicates: (columnsToCompare: Integer[]): MockRange,
  // setBackground: (color: string | null): MockRange,
  // setBackgroundRGB: (red: Integer, green: Integer, blue: Integer): MockRange,
  // setBackgrounds: (color: (string | null)[][]): MockRange,
  // setBorder: ,
  //     top: : boolean | null,
  //     left: : boolean | null,
  //     bottom: : boolean | null,
  //     right: : boolean | null,
  //     vertical: : boolean | null,
  //     horizontal: : boolean | null,
  // ): : MockRange,
  // setBorder: ,
  //     top: : boolean | null,
  //     left: : boolean | null,
  //     bottom: : boolean | null,
  //     right: : boolean | null,
  //     vertical: : boolean | null,
  //     horizontal: : boolean | null,
  //     color: : string | null,
  //     style: : BorderStyle | null,
  // ): : MockRange,
  // setDataValidation: (rule: DataValidation | null): MockRange,
  // setDataValidations: (rules: (DataValidation | null)[][]): MockRange,
  // setFontColor: (color: string | null): MockRange,
  // setFontColorObject: (color: Color | null): MockRange,
  // setFontColorObjects: (colors: (Color | null)[][]): MockRange,
  // setFontColors: (colors: any[][]): MockRange,
  // setFontFamilies: (fontFamilies: (string | null)[][]): MockRange,
  // setFontFamily: (fontFamily: string | null): MockRange,
  // setFontLine: (fontLine: FontLine | null): MockRange,
  // setFontLines: (fontLines: (FontLine | null)[][]): MockRange,
  // setFontSize: (size: Integer): MockRange,
  // setFontSizes: (sizes: Integer[][]): MockRange,
  // setFontStyle: (fontStyle: FontStyle | null): MockRange,
  // setFontStyles: (fontStyles: (FontStyle | null)[][]): MockRange,
  // setFontWeight: (fontWeight: FontWeight | null): MockRange,
  // setFontWeights: (fontWeights: (FontWeight | null)[][]): MockRange,
  // setFormula: (formula: string): MockRange,
  // setFormulaR1C1: (formula: string): MockRange,
  // setFormulas: (formulas: string[][]): MockRange,
  // setFormulasR1C1: (formulas: string[][]): MockRange,
  // setHorizontalAlignment: (alignment: "left" | "center" | "normal" | "right" | null): MockRange,
  // setHorizontalAlignments: (alignments: ("left" | "center" | "normal" | "right" | null)[][]): MockRange,
  // setNote: (note: string | null): MockRange,
  // setNotes: (notes: (string | null)[][]): MockRange,
  // setNumberFormat: (numberFormat: string): MockRange,
  // setNumberFormats: (numberFormats: string[][]): MockRange,
  // setRichTextValue: (value: RichTextValue): MockRange,
  // setRichTextValues: (values: RichTextValue[][]): MockRange,
  // setShowHyperlink: (showHyperlink: boolean): MockRange,
  // setTextDirection: (direction: TextDirection | null): MockRange,
  // setTextDirections: (directions: (TextDirection | null)[][]): MockRange,
  // setTextRotation: (degrees: Integer): MockRange,
  // setTextRotation: (rotation: TextRotation): MockRange,
  // setTextRotations: (rotations: TextRotation[][]): MockRange,
  // setTextStyle: (style: TextStyle): MockRange,
  // setTextStyles: (styles: TextStyle[][]): MockRange,
  // setValue: (value: any): MockRange,
  // setValues: (values: any[][]): MockRange,
  // setVerticalAlignment: (alignment: "top" | "middle" | "bottom" | null): MockRange,
  // setVerticalAlignments: (alignments: ("top" | "middle" | "bottom" | null)[][]): MockRange,
  // setVerticalText: (isVertical: boolean): MockRange,
  // setWrap: (isWrapEnabled: boolean): MockRange,
  // setWrapStrategies: (strategies: WrapStrategy[][]): MockRange,
  // setWrapStrategy: (strategy: WrapStrategy): MockRange,
  // setWraps: (isWrapEnabled: boolean[][]): MockRange,
  // shiftColumnGroupDepth: (delta: Integer): MockRange,
  // shiftRowGroupDepth: (delta: Integer): MockRange,
  // sort: (sortSpecObj: any): MockRange,
  // splitTextToColumns: (): void,
  // splitTextToColumns: (delimiter: string): void,
  // splitTextToColumns: (delimiter: TextToColumnsDelimiter): void,
  // trimWhitespace: (): MockRange,
  // uncheck: (): MockRange,
} as unknown as GoogleAppsScript.Spreadsheet.Range;
